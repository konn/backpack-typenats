{-# LANGUAGE RankNTypes, DataKinds, TypeFamilies, PolyKinds, GADTs, TypeInType #-}
{-# LANGUAGE ExplicitNamespaces, TypeOperators, KindSignatures #-}
signature Type.Natural
  ( type Nat
  , induction
  ) where
import Data.Singletons
import Data.Singletons.Prelude.Num
import Data.Singletons.Prelude.Enum

data Nat

instance PNum Nat
instance SNum Nat
instance PEnum Nat
instance SEnum Nat

induction :: forall p (n :: Nat). 
             p (FromInteger 0)
          -> (forall n. Sing n -> p n -> p (Succ n))
          -> Sing n -> p n
